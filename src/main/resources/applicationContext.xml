<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd"
       default-autowire="byName" default-lazy-init="true">

       <context:component-scan base-package="com.cqs.*" />

       <!--配置文件-->
       <context:property-placeholder location="classpath:config.properties"/>

       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
             init-method="init"   destroy-method="close">
           <property name="url" value="${jdbc.url}" />
           <property name="username" value="${jdbc.user}" />
           <property name="password" value="${jdbc.password}" />
           <property name="driverClassName" value="${jdbc.driverClass}" />

           <!-- 配置初始化大小、最小、最大 -->
           <property name="initialSize" value="1" />
           <property name="minIdle" value="1" />
           <property name="maxActive" value="20" />

           <!-- 配置获取连接等待超时的时间 -->
           <property name="maxWait" value="60000" />

           <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
           <property name="timeBetweenEvictionRunsMillis" value="60000" />

           <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
           <property name="minEvictableIdleTimeMillis" value="300000" />

           <property name="validationQuery" value="SELECT 'x'" />
           <property name="testWhileIdle" value="true" />
           <property name="testOnBorrow" value="false" />
           <property name="testOnReturn" value="false" />

           <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
           <property name="poolPreparedStatements" value="true" />
           <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

           <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
           <property name="filters" value="stat,slf4j" />
           <!--&lt;!&ndash;<property name="filters" value="slf4j" />&ndash;&gt;-->
           <!--<property name="connectionProperties" value="statementExecutableSqlLogEnable=true" />-->
           <!--&lt;!&ndash;stat与slf4j为组合关系&ndash;&gt;-->
           <!--<property name="proxyFilters">-->
               <!--<list>-->
                   <!--<ref bean="stat-filter" />-->
                   <!--<ref bean="log-filter" />-->
               <!--</list>-->
           <!--</property>-->

           <!--定期把监控数据输出到日志-->
           <property name="timeBetweenLogStatsMillis" value="1800000" />
           <!--合并多个DruidDataSource的监控数据-->
           <!--<property name="useGlobalDataSourceStat" value="true" />-->
       </bean>
    <!--Druid内置提供一个StatFilter，用于统计监控信息。-->
    <!--StatFilter的别名是stat，这个别名映射配置信息保存在druid-xxx.jar!/META-INF/druid-filter.properties。-->
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
        <property name="slowSqlMillis" value="10" />
        <property name="logSlowSql" value="true" />
        <property name="mergeSql" value="true" />
    </bean>

    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>


    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
           <property name="dataSource" ref="dataSource" />
              <!-- -->
              <property name="packagesToScan">
                  <list>
                      <value>com.cqs.demo2.models.*.model</value>
                      <value>com.cqs.security.*.model</value>
                  </list>
              </property>
           <property name="hibernateProperties">
                     <props>
                            <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                            <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                            <prop key="hibernate.format_sql">true</prop>
                            <prop key="hibernate.release_mode">auto</prop>
                            <prop key="hibernate.connection.isolation">1</prop>
                            <!--<prop key="hibernate.cache.use_query_cache">true</prop>-->
                            <!--<prop key="hibernate.cache.use_second_level_cache">true</prop>-->
                            <prop key="hibernate.jdbc.batch_size">25</prop>
                            <prop key="hibernate.jdbc.fetch_size">25</prop>
                            <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
                            <prop key="jdbc.use_scrollable_resultset">false</prop>
                         <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
                     </props>
              </property>
       </bean>


       <bean id="hibernateTransactionManagement" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
              <property name="sessionFactory" ref="sessionFactory" />
       </bean>

    <bean id="userDetailsService"
          class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <tx:advice transaction-manager="hibernateTransactionManagement" id="txAdvice" >
              <tx:attributes>
                     <tx:method name="get*" read-only="true"/>
                     <tx:method name="find*" read-only="true"/>
                     <tx:method name="query*" read-only="true"/>
                     <tx:method name="search*" read-only="true"/>
                     <tx:method name="create*" />
                     <tx:method name="save*" />
                     <tx:method name="update*" />
                     <tx:method name="*" propagation="REQUIRED" />
              </tx:attributes>
       </tx:advice>

       <!-- -->
       <tx:annotation-driven transaction-manager="hibernateTransactionManagement" proxy-target-class="true" />

    <!--AOP-->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>
    <!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"-->
          <!--scope="prototype">-->
        <!--&lt;!&ndash;方法名正则匹配拦截配置&ndash;&gt;-->
        <!--<property name="patterns">-->
            <!--<list>-->
                <!--<value>com.cqs.demo2.models.*.service.*.*</value>-->
                <!--<value>com.cqs.demo2.models.news.dao.*</value>-->
                <!--<value>com.cqs.demo2.common.base.BaseService.*</value>-->
                <!--<value>com.cqs.demo2.common.base.dao.BaseDao.*</value>-->
                <!--<value>com.cqs.demo2.common.base.dao.*.*</value>-->
                <!--<value>com.cqs.demo2.common.base.dao.HibernateDao.*</value>-->
                <!--<value>com.cqs.demo2.models.*.*.*</value>-->
            <!--</list>-->
        <!--</property>-->
    <!--</bean>-->
    <bean id="druid-stat-pointcut" class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <property name="proxyTargetClass" value="true" />
        <property name="beanNames">
            <list>
                <!-- 这里配置需要拦截的bean id列表 -->
                <value>*Dao</value>
                <value>*Service</value>
                <value>*Action</value>
            </list>
        </property>
        <property name="interceptorNames">
            <list>
                <value>druid-stat-interceptor</value>
            </list>
        </property>
    </bean>


    <!--aop支持-->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!--<aop:config>-->
        <!--<aop:advisor advice-ref="druid-stat-interceptor"-->
                     <!--pointcut-ref="druid-stat-pointcut" />-->
    <!--</aop:config>-->




</beans>