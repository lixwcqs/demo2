<!--<!DOCTYPE web-app PUBLIC-->
 <!--"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"-->
 <!--"http://java.sun.com/dtd/web-app_2_3.dtd" >-->

<web-app xmlns="http://java.sun.com/xml/ns/javaee"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
        version="3.0">

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:applicationContext.xml,
            <!--classpath:spring-security.xml-->
        </param-value>
    </context-param>

    <!--tomcat启动，filter载入的Log4j配置文件位置 -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.properties</param-value>
    </context-param>

    <!--Spring默认刷新Log4j配置文件的间隔,单位为millisecond, 用于在线动态修改log4j日志 -->
    <context-param>
        <param-name>log4jRefreshInterval</param-name>
        <param-value>30000</param-value>
    </context-param>


    <!--在启动Web容器时，自动装配Spring spring-context.xml的配置信息 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <!-- Spring 刷新Introspector防止内存泄露 -->
    <listener>
        <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
    </listener>



    <!--Spring Security配置-->
    <!--<filter>-->
        <!--<filter-name>springSecurityFilterChain</filter-name>-->
        <!--<filter-class>-->
            <!--org.springframework.web.filter.DelegatingFilterProxy-->
        <!--</filter-class>-->
    <!--</filter>-->

    <!--<filter-mapping>-->
        <!--<filter-name>springSecurityFilterChain</filter-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</filter-mapping>-->

    <!--<listener>-->
    <!--<listener-class>-->
    <!--org.springframework.security.web.session.HttpSessionEventPublisher-->
    <!--</listener-class>-->
    <!--</listener>-->


    <!-- 编码 -->
    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--
     用来把一个Hibernate Session和一次完整的请求过程对应的线程相绑定
       防止懒加载的过程中抛出LazyInitializationException
     -->
    <filter>
        <filter-name>openSessionInViewFilter</filter-name>
        <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>openSessionInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>struts2Filter</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>struts2Filter</filter-name>
        <url-pattern>*.action</url-pattern>
    </filter-mapping>
    <filter-mapping>
        <filter-name>struts2Filter</filter-name>
        <url-pattern>*.jsp</url-pattern>
    </filter-mapping>


    <filter>
        <filter-name>requestContextFilter</filter-name>
        <filter-class>org.springframework.web.filter.RequestContextFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>requestContextFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <servlet>
        <servlet-name>DruidStatView</servlet-name>
        <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>DruidStatView</servlet-name>
        <url-pattern>/druid/*</url-pattern>
    </servlet-mapping>

    <filter>
        <filter-name>DruidWebStatFilter</filter-name>
        <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
        <init-param>
            <param-name>exclusions</param-name>
            <param-value>*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
        </init-param>

        <init-param>
            <param-name>sessionStatMaxCount</param-name>
            <param-value>1000</param-value>
        </init-param>

        <init-param>
            <param-name>sessionStatEnable</param-name>
            <param-value>true</param-value>
        </init-param>

        <init-param>
            <param-name>profileEnable</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>


    <filter-mapping>
        <filter-name>DruidWebStatFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <!-- session过期时间为30分钟-->
    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>

    <welcome-file-list>
        <welcome-file>/commons/index.jsp</welcome-file>
        <welcome-file>/demo2/login.jsp</welcome-file>
    </welcome-file-list>

    <!--<jsp-config>-->
        <!--<taglib>-->
            <!--&lt;!&ndash; 配置标签的引用地址 JSP页面中引用时使用&ndash;&gt;-->
            <!--<taglib-uri>http://www.cqs.com/functions</taglib-uri>-->
            <!--&lt;!&ndash; 配置标签的TLD文件地址 &ndash;&gt;-->
            <!--<taglib-location>/WEB-INF/tags/ELCqs.tld</taglib-location>-->
        <!--</taglib>-->
    <!--</jsp-config>-->
</web-app>
